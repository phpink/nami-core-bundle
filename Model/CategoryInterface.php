<?php

namespace PhpInk\Nami\CoreBundle\Model;

use Doctrine\Common\Collections\Collection;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * Category interface
 */
interface CategoryInterface
{
    /**
     * Category constructor
     */
    public function __construct();

    /**
     * Fill null collection properties
     *
     * @ODM\PostLoad
     */
    public function initialize();

    /**
     * Unused:
     * Generated by Gedmo MaterializedPath
     * @return $this
     */
    public function updateLevel();

    /**
     * Get the value of level.
     * TreeLevel generated by Gedmo MaterializedPath
     *
     * @return integer
     */
    public function getLevel();
    
    /**
     * Get the value of path.
     * TreePath generated by Gedmo MaterializedPath
     *
     * @return boolean
     */
    public function getPath();

    /**
     * Set the value of active.
     *
     * @param boolean $active
     * @return CategoryInterface
     */
    public function setActive($active);

    /**
     * Get the value of active.
     *
     * @return boolean
     */
    public function isActive();

    /**
     * Get the id of the parent category.
     *
     * @return string
     */
    public function getParentId();

    /**
     * Set parent Category (one to one).
     *
     * @param CategoryInterface $parent
     * @return CategoryInterface
     */
    public function setParent(CategoryInterface $parent = null);

    /**
     * Get parent Category (one to one).
     *
     * @return CategoryInterface
     */
    public function getParent();

    /**
     * Set name
     *
     * @param string $name
     * @return CategoryInterface
     */
    public function setName($name);

    /**
     * Get name
     *
     * @return string
     */
    public function getName();

    /**
     * Set slug
     *
     * @param string $slug
     * @return CategoryInterface
     */
    public function setSlug($slug);

    /**
     * Get the value of slug.
     *
     * @return string
     */
    public function getSlug();

    /**
     * Get the value of title.
     *
     * @return string
     */
    public function getTitle();

    /**
     * Set the value of title.
     *
     * @param string $title
     * @return Page
     */
    public function setTitle($title);

    /**
     * Get the value of header.
     *
     * @return string
     */
    public function getHeader();

    /**
     * Set the value of header.
     *
     * @param string $header
     * @return Page
     */
    public function setHeader($header);

    /**
     * Get the value of metaKeywords.
     *
     * @return string
     */
    public function getMetaKeywords();

    /**
     * Set the value of metaKeywords.
     *
     * @param string $keywords
     * @return CategoryInterface
     */
    public function setMetaKeywords($keywords);

    /**
     * Get the value of metaDescription.
     *
     * @return string
     */
    public function getMetaDescription();

    /**
     * Get the value of content.
     *
     * @return string
     */
    public function getContent();

    /**
     * Set the value of content.
     *
     * @param string $content
     * @return Page
     */
    public function setContent($content);

    /**
     * Set the value of metaDescription.
     *
     * @param string $description
     * @return CategoryInterface
     */
    public function setMetaDescription($description);

    public function addItem(CategoryInterface $category);

    public function setItems($items);

    public function getItems();

    public function generatePage();

    public function __toString();
}
